node {
    
    def WORKSPACE = pwd()
    def mvnHome = tool 'maven'
    def token = readFile("/var/run/secrets/kubernetes.io/serviceaccount/token")
    
   
   stage 'Checkout'

       checkout scm

   stage 'Maven Build'
   
        try {
            sh "set +x && cd projects/brms-coolstore-demo && ${mvnHome}/bin/mvn -Dmaven.test.failure.ignore clean install"
   
            step([$class: 'ArtifactArchiver', artifacts: '**/target/*.war', fingerprint: true])
        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }

    stage 'OpenShift Build'
      
        try {

            // Prepare Artifacts
            sh """
                set +x
                mkdir -p ${WORKSPACE}/projects/brms-coolstore-demo/target/s2i-build/deployments
                cp -v ${WORKSPACE}/projects/brms-coolstore-demo/target/brms-coolstore-demo.war ${WORKSPACE}/projects/brms-coolstore-demo/target/s2i-build/deployments/ROOT.war
                tar -cvf ${WORKSPACE}/projects/brms-coolstore-demo/target/brms-coolstore-demo.tar -C ${WORKSPACE}/projects/brms-coolstore-demo/target/s2i-build .
                """
            
            // Push Artifacts to build image
            sh """
                set +x
                ${WORKSPACE}/support/scripts/trigger-monitor-build.sh -h=${OPENSHIFT_HOST} -p=${OPENSHIFT_PORT} -t=${token} -n=${OPENSHIFT_SOURCE_PROJECT} -a=${OPENSHIFT_SOURCE_APPLICATION} -f="${WORKSPACE}/projects/brms-coolstore-demo/target/brms-coolstore-demo.tar"
                   
                ${WORKSPACE}/support/scripts/verify-deploy.sh -h=${OPENSHIFT_HOST} -p=${OPENSHIFT_PORT} -t=${token} -n=${OPENSHIFT_SOURCE_PROJECT} -a=${OPENSHIFT_SOURCE_APPLICATION}

            """

                
        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }          
    
        
    stage "Deploy to Production"
   
        input "Deploy Application to Production?"
 
        try {    
        
            sh "echo Deploying to Production"
        
            sh "set +x && echo Deploying to Production"
        
            // Promote Application support scripts
            sh """
                set +x
                    
                ${WORKSPACE}/support/scripts/is-tag.sh -h=${OPENSHIFT_HOST} -p=${OPENSHIFT_PORT} -t=${token} -sn=${OPENSHIFT_SOURCE_PROJECT} -sa=${OPENSHIFT_SOURCE_APPLICATION} -dn=${OPENSHIFT_DESTINATION_PROJECT} -da=${OPENSHIFT_DESTINATION_APPLICATION}
    
                sleep 5s 
             
                ${WORKSPACE}/support/scripts/verify-deploy.sh -h=${OPENSHIFT_HOST} -p=${OPENSHIFT_PORT} -t=${token} -n=${OPENSHIFT_DESTINATION_PROJECT} -a=${OPENSHIFT_DESTINATION_APPLICATION}
            
            """

        }
        catch(e) {
            currentBuild.result = 'FAILURE'
            throw e
        }
        finally {
            processStageResult()
        }        
}

def processStageResult() {

    if (currentBuild.result != null) {
        sh "exit 1"
    }
}
